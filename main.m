%% ========================================================================
%  Code generated by Federico Tessari, PhD
%  Mechanical Engineering Department, MIT
%  for any question reach out to ftessari@mit.edu
%  Latest update October 16, 2025
% ========================================================================

% Press "Run" to execute the whole script and obtain all the figures and
% results of our work.
clear; clc; close all
%% ---------- Figure/graphics defaults ----------
set(0, 'DefaultLineLineWidth', 1);
set(groot,'defaultAxesFontSize',10);
set(0,'defaultfigurecolor',[1 1 1]); % white figure background
set(groot, 'defaultAxesTickLabelInterpreter','latex');
set(groot, 'defaultLegendInterpreter','latex');
set(groot,'defaultTextInterpreter','latex');

% Extra prints path if present (harmless otherwise)
addpath(genpath('Data'));

%% ---------- Labels & constants ----------
condition = {'CN','UCN'};                     % Arm configurations: 1=CN (Undesired), 2=UCN (Preferred)
task      = {'FLAT','LCK','FEX','FEXURD','ULCK'};

Nsubj = 9;                                    % Number of subjects

%% ---------- Sampling & trimming ----------
fs   = 50;         % [Hz] (sampling frequency)
N    = 150;        % samples to save per trial
t_tot = (1/fs)*N;  % total time per trial (not used later, retained for clarity)

% Cropping indices: keep the segment [end-idx_min : end-idx_max]
idx_min = 199;  
idx_max = 50;  

%% ========================================================================
%  DATA LOADING
% ========================================================================
% Containers
MVF_i_data = cell(Nsubj,1);
MVF_f_data = cell(Nsubj,1);
MVF_tot_i  = nan(Nsubj,3);  % [subj, mean|F|, std|F|]
MVF_tot_f  = nan(Nsubj,3);

dataset    = cell(Nsubj,2,5,5); % {subj,cond,task,trial}
f_tot_med  = cell(Nsubj,2,5,5); % per-trial median |F|

for subj = 1:Nsubj
    % ---- MVF files (Pre/Post) ----
    MVF_i = importdata(sprintf('S%d_MVF_i.txt', subj));
    MVF_f = importdata(sprintf('S%d_MVF_f.txt', subj));

    MVF_i_data{subj}.data = MVF_i.data;
    MVF_f_data{subj}.data = MVF_f.data;

    % Safe cropping (same indices, clamped to data length)
    MVF_i_data{subj}.data_trim = MVF_i_data{subj}.data( ...
        max(1,end-idx_min) : max(1,end-idx_max), :);
    MVF_f_data{subj}.data_trim = MVF_f_data{subj}.data( ...
        max(1,end-idx_min) : max(1,end-idx_max), :);

    % Subject id
    MVF_tot_i(subj,1) = subj;
    MVF_tot_f(subj,1) = subj;

    % mean/std of |F|
    MVF_tot_i(subj,2) = mean(sqrt(sum(MVF_i_data{subj}.data_trim(:,1:3).^2,2)));
    MVF_tot_i(subj,3) = std( sqrt(sum(MVF_i_data{subj}.data_trim(:,1:3).^2,2)));
    MVF_tot_f(subj,2) = mean(sqrt(sum(MVF_f_data{subj}.data_trim(:,1:3).^2,2)));
    MVF_tot_f(subj,3) = std( sqrt(sum(MVF_f_data{subj}.data_trim(:,1:3).^2,2)));

    % ---- Trials ----
    for cond = 1:2
        for t = 1:5
            for trial = 1:5
                data_name = sprintf('S%d_%s_%s_T%d.txt', subj, condition{cond}, task{t}, trial);
                data_file = importdata(data_name);

                dataset{subj,cond,t,trial}.data = data_file.data;
                dataset{subj,cond,t,trial}.name = data_name;

                % 3 s window from trial end: [end-idx_min : end-idx_max]
                data_trim = dataset{subj,cond,t,trial}.data( ...
                    max(1,end-idx_min) : max(1,end-idx_max), :);
                dataset{subj,cond,t,trial}.data_trim = data_trim;

                % Total force magnitude |F|
                fmag = sqrt(sum(data_trim(:,1:3).^2,2));
                f_tot_med{subj,cond,t,trial} = median(fmag);
            end
        end
    end
end

%% ========================================================================
%  Median Difference between Arm Configurations (per trial)
% ========================================================================
medianCondDiff     = [];  % CN - UCN
medianCondDiff_per = [];  % percent relative to UCN

for subj = 1:Nsubj
    for t = 1:5
        for trial = 1:5
            if (subj ~= 9 && t ~= 2)
                mCN  = f_tot_med{subj,1,t,trial};
                mUCN = f_tot_med{subj,2,t,trial};
                medianCondDiff(end+1)     = mCN - mUCN; 
                medianCondDiff_per(end+1) = 100*(mCN - mUCN)/mUCN; 
            end
        end
    end
end

%% ========================================================================
%  Pooled trials per subject/cond/task (concatenate all 5 trials)
% ========================================================================
f_tot_tr_pl = cell(Nsubj,2,5); % (subj, cond, task)

for subj = 1:Nsubj
    for cond = 1:2
        for t = 1:5
            pooled_trials = [];
            for trial = 1:5
                fmag = sqrt(sum(dataset{subj,cond,t,trial}.data_trim(:,1:3).^2,2));
                pooled_trials = [pooled_trials; fmag]; 
            end
            f_tot_tr_pl{subj,cond,t} = pooled_trials;
        end
    end
end

clearvars fmag data_trim data_file data_name

%% ========================================================================
%  Prepare data for boxplot/ANOVA (Pre vs Post MVF)
% ========================================================================
all_data        = [];     % concatenated magnitudes
group           = [];     % subject indices
condIPostLabels = {};     % 'Pre' or 'Post'

median_pre  = NaN(Nsubj,1);
median_post = NaN(Nsubj,1);

for subj = 1:Nsubj
    norm_i = sqrt(sum(MVF_i_data{subj}.data_trim(:,1:3).^2,2));
    norm_f = sqrt(sum(MVF_f_data{subj}.data_trim(:,1:3).^2,2));

    median_pre(subj)  = median(norm_i,'omitnan');
    median_post(subj) = median(norm_f,'omitnan');

    all_data  = [all_data; norm_i; norm_f]; %#ok<AGROW>
    nThis     = numel(norm_i) + numel(norm_f);
    group     = [group; repmat(subj, nThis, 1)]; %#ok<AGROW>
    condIPostLabels = [condIPostLabels; ...
        [repmat({'Pre'},  numel(norm_i), 1); ...
         repmat({'Post'}, numel(norm_f), 1)]]; %#ok<AGROW>
end

%% ========================================================================
%  Figure 7 (and Supplementary Figures 12..20): SINGLE SUBJECT ANALYSIS
% ========================================================================
% Task colors & legend
task_color = zeros(5,3);
task_color(1,:) = [0 0.4470 0.7410];   % FLAT
task_color(2,:) = [0.3010 0.7450 0.9330]; % LCK
task_color(3,:) = [0.4660 0.6740 0.1880]; % FEX
task_color(4,:) = [0.9290 0.6940 0.1250]; % FEXURD
task_color(5,:) = [0.8500 0.3250 0.0980]; % ULCK
task_legend = {'FLAT','LCK','FEX','URD','ULCK'}; % 'URD' label for FEXURD

for subj = 1:Nsubj
    figure('Color','white', 'Units','inches', 'Position',[1 1 7 5])
    tt = tiledlayout(3,4, 'TileSpacing', 'compact', 'Padding', 'compact');
    title(tt, sprintf('Subject: %d', subj), 'FontName', 'Times New Roman', 'FontSize', 14);

    hLegend = gobjects(1, numel(task_legend));

    for cond = 1:2
        % --- Total Force panel (left col for CN, right col for UCN) ---
        if cond == 1
            axCol1 = nexttile(1,[3 1]);
        else
            axCol3 = nexttile(3,[3 1]);
        end
        hold on

        for t = 1:5
            for trial = 1:5
                f_tot = sqrt(sum(dataset{subj,cond,t,trial}.data(:,1:3).^2,2));
                h = plot(linspace(0, 7, length(f_tot)), f_tot, ...
                    'LineWidth', 1.5, 'Color', task_color(t,:));
                if trial == 1 && cond == 1
                    hLegend(t) = h;
                end
            end
        end

        ylim([0 45]);
        yl = ylim;
        % Shade [3,6] s window
        fill([3 6 6 3], [yl(1) yl(1) yl(2) yl(2)], [0.5 0.5 0.5], ...
            'FaceAlpha',0.2, 'EdgeColor','none');
        plot([3 3],[yl(1) yl(2)],'k--');
        plot([6 6],[yl(1) yl(2)],'k--');

        xlabel('Time [s]'); ylabel('$F$ [N]'); box off

        % --- Fz ---
        if cond == 1
            axCol2Top = nexttile(2);
        else
            axCol4Top = nexttile(4);
        end
        hold on
        for t = 1:5
            for trial = 1:5
                fz = -dataset{subj,cond,t,trial}.data(:,3);
                plot(linspace(0,7,length(fz)), fz, 'LineWidth', 1.5, 'Color', task_color(t,:));
            end
        end
        xlabel('Time [s]'); ylabel('$F_z$ [N]'); ylim([0 45]); box off

        % --- Fx ---
        if cond == 1
            nexttile(6);
        else
            nexttile(8);
        end
        hold on
        for t = 1:5
            for trial = 1:5
                fx = dataset{subj,cond,t,trial}.data(:,1);
                plot(linspace(0,7,length(fx)), fx, 'LineWidth', 1.5, 'Color', task_color(t,:));
            end
        end
        xlabel('Time [s]'); ylabel('$F_x$ [N]'); ylim([-10 10]); box off

        % --- Fy ---
        if cond == 1
            nexttile(10);
        else
            nexttile(12);
        end
        hold on
        for t = 1:5
            for trial = 1:5
                fy = dataset{subj,cond,t,trial}.data(:,2);
                plot(linspace(0,7,length(fy)), fy, 'LineWidth', 1.5, 'Color', task_color(t,:));
            end
        end
        xlabel('Time [s]'); ylabel('$F_y$ [N]'); ylim([-10 10]); box off
    end

    % Legend under layout
    lgd = legend(hLegend, task_legend, 'Box','off', 'Orientation','horizontal', 'FontName','Times New Roman');
    lgd.Layout.Tile = 'south'; lgd.NumColumns = numel(task_legend);
    drawnow;

    % Column headers "(A) Undesired" / "(B) Preferred"
    p1 = axCol1.Position; p2 = axCol2Top.Position;
    p3 = axCol3.Position; p4 = axCol4Top.Position;
    xUndes = (p1(1)+p1(3)+p2(1))/2;
    xPref  = (p3(1)+p3(3)+p4(1))/2;
    yTop   = min(max([p1(2)+p1(4), p2(2)+p2(4), p3(2)+p3(4), p4(2)+p4(4)]), 0.98);

    annotation('textbox', [xUndes-0.095, yTop, 0.25, 0.03], 'String', '(A) Undesired', ...
        'HorizontalAlignment','center','VerticalAlignment','bottom', ...
        'EdgeColor','none','FontName','Times New Roman','FontSize',12);

    annotation('textbox', [xPref-0.095,  yTop, 0.25, 0.03], 'String', '(B) Preferred', ...
        'HorizontalAlignment','center','VerticalAlignment','bottom', ...
        'EdgeColor','none','FontName','Times New Roman','FontSize',12);
end

%% ========================================================================
%  Figure 8 – Boxplots: 3x3 subjects, each with 1x2 (Undesired | Preferred)
% ========================================================================
figure('Color','white', 'Units','inches', 'Position',[0.05 0.05 7 7])
tOuter = tiledlayout(3,3, 'TileSpacing','loose', 'Padding','compact');

% (Optional) store medians per subject x cond x task
medians = nan(9, 2, 5);

for subj = 1:9
    tSub = tiledlayout(tOuter, 1, 2, 'TileSpacing','compact', 'Padding','compact');
    tSub.Layout.Tile = subj;
    title(tSub, sprintf('Subject: %d', subj), 'FontName','Times New Roman');

    for cond = 1:2
        ax = nexttile(tSub, cond);
        hold(ax,'on')

        % Pooled |F| across trials for each task
        allData = cell(1,5);
        for t = 1:5
            pooledData = [];
            for trial = 1:5
                f_tot = sqrt(sum(dataset{subj,cond,t,trial}.data_trim(:,1:3).^2,2));
                pooledData = [pooledData; f_tot];
            end
            allData{t} = pooledData;
            medians(subj,cond,t) = median(pooledData,'omitnan');
        end

        boxplot(ax, cell2mat(allData), ...
            repelem(1:5, cellfun(@numel, allData)), ...
            'Colors', task_color, 'Symbol','.');

        grid(ax,'on'); box(ax,'off');
        ax.FontName = 'Times New Roman'; ax.FontSize = 10;
        xticks(ax, 1:5); xticklabels(ax, task_legend);
        ylim(ax, [0 45]);

        if cond == 1
            title(ax, '(A) Undesired', 'FontName','Times New Roman');
        else
            title(ax, '(B) Preferred', 'FontName','Times New Roman');
        end
    end
    resultsTable{subj} = perform_anova_analysis(dataset, subj); %This table contains the results of the statistical analysis for each subject
end

xlabel(tOuter, 'Task Conditions', 'FontName','Times New Roman');
ylabel(tOuter, '$F$ [N]', 'Interpreter','latex', 'FontName','Times New Roman');

%% ========================================================================
%  Figure 9 – Histogram of Median Differences (CN − UCN)
% ========================================================================
figure('Color','white','Units','inches','Position',[1 1 5 3.5]);
tiledlayout(2,1)

nexttile()
histogram(medianCondDiff,'EdgeColor','none','BinWidth',1); hold on
plot(median(medianCondDiff,'omitnan')*ones(1,10), linspace(0,40,10),'r--','LineWidth',2);
xlabel('$\Delta F_{med}$ [N]','FontSize',11);
ylabel('Frequency','FontSize',11);
box off

nexttile()
histogram(medianCondDiff_per,'EdgeColor','none','BinWidth',4.5); hold on
plot(median(medianCondDiff_per,'omitnan')*ones(1,10), linspace(0,35,10),'r--','LineWidth',2);
xlabel('$\Delta e_{med}$ [\%]','FontSize',11);
ylabel('Frequency','FontSize',11);
box off

% ---------- Pairwise t-tests: Pre vs Post for each subject ----------
fprintf('\nPairwise t-tests (Pre vs Post):\n');
p_ttest = NaN(Nsubj,1);
for subj = 1:Nsubj
    norm_i = sqrt(sum(MVF_i_data{subj}.data_trim(:,1:3).^2,2));
    norm_f = sqrt(sum(MVF_f_data{subj}.data_trim(:,1:3).^2,2));
    [~, pval] = ttest2(norm_i, norm_f);
    p_ttest(subj) = pval;
    fprintf('Subject %d: p = %.4f\n', subj, pval);
end

% ---------- Summary table ----------
Subject     = (1:Nsubj).';
Median_Pre  = median_pre;
Median_Post = median_post;
Delta       = Median_Post - Median_Pre;
PctIncrease = 100 * Delta ./ Median_Pre;
PctIncrease(Median_Pre==0) = NaN;  % safety

T_summary = table(Subject, Median_Pre, Median_Post, Delta, PctIncrease, p_ttest, ...
    'VariableNames', {'Subject','Median_Pre','Median_Post','Delta_PostMinusPre','PctIncrease_vsPre','PValue_ttest'});

disp('=== Summary (per subject) ===');
disp(T_summary);

avg_PctIncrease = mean(PctIncrease([1 2 3 5 6 7 8 9])); 

%% ========================================================================
%  Figure 10 – Pre vs Post (MVF) boxplots aligned by subject
% ========================================================================
figure('Color','white','Units','inches','Position',[1 1 7 3.5]);

% Ensure order Pre -> Post (avoid name collision with `condition` above)
condIPostCat = categorical(condIPostLabels, {'Pre','Post'});

% Positions: for each subject, place Pre at s-0.18, Post at s+0.18
nSubj = numel(unique(group));
pos = [ (1:nSubj)-0.18 ; (1:nSubj)+0.18 ];
pos = pos(:)';
blankLabels = repmat({''}, 1, numel(pos));

boxplot(all_data, {group, condIPostCat}, ...
    'positions', pos, ...
    'labels', blankLabels, ...        % suppress boxplot's own labels
    'colors', ['k','b'], ...          % black=Pre, blue=Post
    'symbol', 'o', ...
    'plotstyle','traditional');

ax = gca;
ax.FontSize = 12;
ax.FontName = 'Times New Roman';
ax.XTick = 1:nSubj;
ax.XTickLabel = string(1:nSubj);
xlabel('Subject','FontName','Times New Roman');
ylabel('F [N]','FontName','Times New Roman');
box off

% Single legend (markers only)
hold on
h1 = plot(NaN,NaN,'sk','MarkerFaceColor','k');
h2 = plot(NaN,NaN,'sb','MarkerFaceColor','b');
legend([h1 h2], {'Pre','Post'}, 'Location','northoutside', ...
       'Orientation','horizontal', 'FontName','Times New Roman', 'Box','off');

%% ========================================================================
%  LOCAL FUNCTIONS – used by perform_anova_analysis
% ========================================================================

function posthocTable = perform_anova_analysis(dataset, subj)
    % Subject-level 2-way ANOVA (Condition x Task) with Bonferroni post-hoc.
    % Saves 'ANOVA_Results_Subject<subj>.xlsx'.
    task_labels = {'FLAT', 'LCK', 'FEX', 'FEXURD', 'ULCK'};
    cond_labels = {'CN', 'UCN'};
    % filename = sprintf('ANOVA_Results_Subject%d.xlsx', subj);

    allData   = [];
    groupCond = [];
    groupTask = [];
    data_map  = containers.Map();  % Key: 'CN_FLAT', etc.

    numCond = 2; numTask = 5; numTrials = 5;

    % Pool |F| by condition x task across trials
    for cond = 1:numCond
        for t = 1:numTask
            pooledData = [];
            for trial = 1:numTrials
                f_tot = sqrt(sum(dataset{subj,cond,t,trial}.data_trim(:,1:3).^2,2));
                pooledData = [pooledData; f_tot]; %#ok<AGROW>
            end
            allData   = [allData; pooledData]; %#ok<AGROW>
            groupCond = [groupCond; repmat(cond, numel(pooledData), 1)]; %#ok<AGROW>
            groupTask = [groupTask; repmat(t,    numel(pooledData), 1)]; %#ok<AGROW>
            data_map(sprintf('%s_%s', cond_labels{cond}, task_labels{t})) = pooledData;
        end
    end

    % 2-way ANOVA (no console spam)
    [p, ~, stats] = anovan(allData, {groupCond, groupTask}, ...
        'model','interaction', 'varnames', {'Condition','Task'}, 'display','off');

    % Save ANOVA table
    % writetable(table({'Condition'; 'Task'; 'Interaction'}, p, p < 0.05, ...
              % 'VariableNames', {'Factor', 'P_Value', 'Significant'}), filename, 'Sheet', 'ANOVA');

    % Post-hoc with joint factor dimension, Bonferroni correction
    [c, ~, ~, gnames] = multcompare(stats, 'Dimension', [1 2], 'CType', 'bonferroni', 'Display', 'off');

    % Mapping: "Condition=1, Task=2" -> "CN - LCK"
    condition_map = containers.Map({'Condition=1', 'Condition=2'}, {'CN', 'UCN'});
    task_map = containers.Map({'Task=1', 'Task=2', 'Task=3', 'Task=4', 'Task=5'}, ...
                              {'FLAT', 'LCK', 'FEX', 'FEXURD', 'ULCK'});

    group1_names   = cell(size(c,1),1);
    group2_names   = cell(size(c,1),1);
    validComparisons = false(size(c,1),1);
    effectSizes    = NaN(size(c,1),1);

    for i = 1:size(c,1)
        % Decode group labels
        [cond1, task1] = strtok(gnames{c(i,1)}, ','); task1 = strtrim(task1(2:end));
        [cond2, task2] = strtok(gnames{c(i,2)}, ','); task2 = strtrim(task2(2:end));

        if isKey(condition_map, cond1), cond1 = condition_map(cond1); end
        if isKey(condition_map, cond2), cond2 = condition_map(cond2); end
        if isKey(task_map, task1), task1 = task_map(task1); end
        if isKey(task_map, task2), task2 = task_map(task2); end

        group1_names{i} = sprintf('%s - %s', cond1, task1);
        group2_names{i} = sprintf('%s - %s', cond2, task2);

        % Keep only: same condition, different task OR same task, different condition
        sameCondition = strcmp(cond1,cond2) && ~strcmp(task1,task2);
        sameTask      = strcmp(task1,task2) && ~strcmp(cond1,cond2);

        if sameCondition || sameTask
            validComparisons(i) = true;

            % Robust Cohen's d if available, otherwise classic pooled-SD d
            key1 = sprintf('%s_%s', cond1, task1);
            key2 = sprintf('%s_%s', cond2, task2);
            if isKey(data_map, key1) && isKey(data_map, key2)
                x = data_map(key1); y = data_map(key2);
                effectSizes(i) = local_cohens_d(x, y);
            end
        end
    end

    posthocTable = table(group1_names(validComparisons), group2_names(validComparisons), ...
                         c(validComparisons,3), c(validComparisons,4), ...
                         c(validComparisons,5), c(validComparisons,6), ...
                         c(validComparisons,6) < 0.05, ...
                         effectSizes(validComparisons), ...
                         'VariableNames', {'Group1', 'Group2', 'LowerCI', 'MeanDiff', 'UpperCI', 'P_Value', 'Significant', 'Cohens_d'});

    % writetable(posthocTable, filename, 'Sheet', 'PostHoc');
end

function d = local_cohens_d(x, y)
    % Try robust Cohen's d if meanEffectSize is available; else classic d.
    d = NaN;
    try
        if exist('meanEffectSize','file') == 2
            T = meanEffectSize(x, y, Effect="robustcohen");
            d = T.Effect;
            return;
        end
    catch
        % fall through to classic d
    end
    % classic pooled SD Cohen's d
    x = x(~isnan(x)); y = y(~isnan(y));
    nx = numel(x); ny = numel(y);
    sx = std(x,0);   sy = std(y,0);
    sp = sqrt(((nx-1)*sx^2 + (ny-1)*sy^2) / (nx+ny-2));
    d  = (mean(x) - mean(y)) / sp;
end
